/**
 *  The MIT License (MIT)
 *
 *  Copyright (c) 2014 momokan (http://lwjgfont.chocolapod.net)
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
package net.chocolapod.lwjgfont;

import java.io.IOException;

import org.lwjgl.LWJGLUtil;

import net.chocolapod.lwjgfont.packager.ControlCharacter;
import net.chocolapod.lwjgfont.packager.LwjgFontUtil;
import net.chocolapod.lwjgfont.texture.FontTexture;
import net.chocolapod.lwjgfont.texture.FontTextureLoader;

import static net.chocolapod.lwjgfont.packager.ControlCharacter.LineFeed;
import static net.chocolapod.lwjgfont.packager.ControlCharacter.CarriageReturn;
import static net.chocolapod.lwjgfont.packager.BuiltinCharacter.NotMatchedSign;

/**
 * The abstract class of all font classes which are generated by LWJGFont.<br>
 * Each subclasses of this class represent a font and its size to render strings on LWJGL.<br>
 *	This class provide some utility methods for text rendering.<br>
 *	<br>
 *	Example with ClassicTrueTypeH20Font (Let This class be a subclass of LWJGFont).<br>
 * <br>
 * <pre>
 * {@code
 * // Create font a class.
 * LWJGFont font = new ClassicTrueTypeH20Font();
 * // Set foreground color.
 * font.setColor(1f, 0f, 0f);
 * // Draw a string on the location.
 * font.drawString("Hello, LWJGFont.", 100f, 100f, 0f);
 * }
 * </pre>
 */
public abstract class LWJGFont {

	/**
	 * Enumeration of the possible ways LWJGFont can align texts on rendering.
	 */
	public enum ALIGN {
		/**
		 * Indicates that each line of texts should be left-justified.
		 */
		LEGT {
			@Override
			protected DrawPoint calcDrawPoint(float paragraphWidth, float lineWidth, DrawPoint originalDrawPoint) {
				return new DrawPoint(originalDrawPoint.dstX, originalDrawPoint.dstY, originalDrawPoint.dstZ);
			}
		},
		/**
		 * Indicates that each line of texts should be right-justified.
		 */
		RIGHT {
			@Override
			protected DrawPoint calcDrawPoint(float paragraphWidth, float lineWidth, DrawPoint originalDrawPoint) {
				return new DrawPoint(
						originalDrawPoint.dstX + (paragraphWidth - lineWidth),
						originalDrawPoint.dstY,
						originalDrawPoint.dstZ);
			}
		},
		/**
		 * Indicates that each line of texts should be centered.
		 */
		CENTER {
			@Override
			protected DrawPoint calcDrawPoint(float paragraphWidth, float lineWidth, DrawPoint originalDrawPoint) {
				return new DrawPoint(
						originalDrawPoint.dstX + ((paragraphWidth - lineWidth) / 2),
						originalDrawPoint.dstY,
						originalDrawPoint.dstZ);
			}
		};

		protected abstract DrawPoint calcDrawPoint(float paragraphWidth, float lineWidth, DrawPoint originalDrawPoint);
	}

	private float red = 1f;
	private float green = 1f;
	private float blue = 1f;
	private float alpha = 1f;

	private int lineHeight = getDefaultLineHeight();
	private int	lineMargin = 0;
	
	/**
	 * Draws the text given by the specified string, using this font instance's current color.<br>
	 * Note that the specified destination coordinates is a left point of the rendered string's baseline.
	 * @param text the string to be drawn.
	 * @param dstX the x coordinate to render the string.
	 * @param dstY the y coordinate to render the string.
	 * @param dstZ the z coordinate to render the string.
	 * @return Region instance which has the width and the height of text to be drawn
	 * @throws IOException Indicates a failure to read font images as textures.
	 */
	public final Region drawString(String text, float dstX, float dstY, float dstZ) throws IOException {
		DrawPoint		drawPoint = new DrawPoint(dstX, dstY, dstZ);
		MappedCharacter	character;
		Region			region = new Region(0, getLineHeight());
		
		if (!LwjgFontUtil.isEmpty(text)) {
			for (int i = 0; i < text.length(); i++) {
				char	ch = text.charAt(i);

				if (ch == LineFeed.getCharacter()) {
					//	LF は改行扱いにする
					region.extendHeight(getLineHeight(), getLineMargin());
					drawPoint.dstX = dstX;
					drawPoint.dstY -= getLineHeight();
					drawPoint.dstY -= getLineMargin();
					continue;
				} else if (ch == CarriageReturn.getCharacter()) {
					//	CR は無視する
					continue;
				}

				character = retreiveCharacter(ch);
				drawCharacter(drawPoint, character);
				region.updateWidth((int)drawPoint.dstX);
			}
		}

		return region;
	}

	private MappedCharacter retreiveCharacter(char ch) {
		MappedCharacter	character = getMappedCharacter(ch);
		
		if (character == null) {
			//	指定の文字が描画対象でなければ、豆腐を表示する
			character = getMappedCharacter(NotMatchedSign.getCharacter());
		}
		
		return character;
	}
	
	private MappedCharacter drawCharacter(DrawPoint drawPoint, MappedCharacter character) throws IOException {
		float	dstX1 = drawPoint.dstX - character.getPadding();
		float	dstY1 = drawPoint.dstY + character.getAscent() + character.getPadding();
		float	dstX2 = drawPoint.dstX + character.getAdvance() + character.getPadding();
		float	dstY2 = drawPoint.dstY - character.getDescent() - character.getPadding();
		float	srcX1 = character.getSrcX() - character.getPadding();
		float	srcY1 = character.getSrcY() - character.getAscent() - character.getPadding();
		float	srcX2 = character.getSrcX() + character.getAdvance() + character.getPadding();
		float	srcY2 = character.getSrcY() + character.getDescent() + character.getPadding();
		
		String			imagePath = getImagePath(character.getImageIndex());
		FontTexture		texture = FontTextureLoader.loadTexture(this.getClass(), imagePath);
		
		texture.setColor(red, green, blue);
		texture.setAlpha(alpha);
		texture.draw(dstX1, dstY1, dstX2, dstY2, drawPoint.dstZ, srcX1, srcY1, srcX2, srcY2);
		
		drawPoint.dstX += character.getAdvance();

		return character;
	}

	/**
	 * Draws the paragraph given by the specified string, using this font instance's current color.<br>
	 * if the specified string protrudes from paragraphWidth, protruded substring is auto wrapped with left align.<br>
	 * Note that the specified destination coordinates is a left point of the rendered string's baseline.
	 * @param text the string to be drawn.
	 * @param dstX the x coordinate to render the string.
	 * @param dstY the y coordinate to render the string.
	 * @param dstZ the z coordinate to render the string.
	 * @param paragraphWidth the max width to draw the paragraph.
	 * @return Region instance which has the width and the height of text to be drawn
	 * @throws IOException Indicates a failure to read font images as textures.
	 */
	public final Region drawParagraph(String text, float dstX, float dstY, float dstZ, float paragraphWidth) throws IOException {
		return this.drawParagraph(text, dstX, dstY, dstZ, paragraphWidth, ALIGN.LEGT);
	}

	/**
	 * Draws the paragraph given by the specified string, using this font instance's current color.<br>
	 * if the specified string protrudes from paragraphWidth, protruded substring is auto wrapped with the specified align.<br>
	 * Note that the specified destination coordinates is a left point of the rendered string's baseline.
	 * @param texts the array of strings to be drawn.
	 * @param dstX the x coordinate to render the string.
	 * @param dstY the y coordinate to render the string.
	 * @param dstZ the z coordinate to render the string.
	 * @param paragraphWidth the max width to draw the paragraph.
	 * @param align the horizontal align to render the string.
	 * @return Region instance which has the width and the height of text to be drawn
	 * @throws IOException Indicates a failure to read font images as textures.
	 */
	public final Region drawParagraph(String[] texts, float dstX, float dstY, float dstZ, float paragraphWidth, ALIGN align) throws IOException {
		if (LwjgFontUtil.isEmpty(texts)) {
			return new Region();
		}

		String	buff = "";
		for (String text: texts) {
			if (!LwjgFontUtil.isEmpty(text)) {
				buff += "\n";
			}
			buff += text;
		}

		return drawParagraph(buff, dstX, dstY, dstZ, paragraphWidth, align);
	}

	/**
	 * Draws the paragraph given by the specified string, using this font instance's current color.<br>
	 * if the specified string protrudes from paragraphWidth, protruded substring is auto wrapped with the specified align.<br>
	 * Note that the specified destination coordinates is a left point of the rendered string's baseline.
	 * @param text the string to be drawn.
	 * @param dstX the x coordinate to render the string.
	 * @param dstY the y coordinate to render the string.
	 * @param dstZ the z coordinate to render the string.
	 * @param paragraphWidth the max width to draw the paragraph.
	 * @param align the horizontal align to render the string.
	 * @return Region instance which has the width and the height of text to be drawn
	 * @throws IOException Indicates a failure to read font images as textures.
	 */
	public final Region drawParagraph(String text, float dstX, float dstY, float dstZ, float paragraphWidth, ALIGN align) throws IOException {
		Region			region = new Region();
		DrawPoint		drawPoint = new DrawPoint(dstX, dstY, dstZ);
		DrawPoint		tmpDrawPoint;
		MappedCharacter	character;
		String			line = "";
		float			lineWidth = 0;
		
		if (!LwjgFontUtil.isEmpty(text)) {
			for (int i = 0; i < text.length(); i++) {
				char	ch = text.charAt(i);

				if (ch == LineFeed.getCharacter()) {
					//	LF は改行扱いにする
//					drawPoint.dstX = dstX;
//					drawPoint.dstY -= getLineHeight();
					//	ここまでの文字を表示する
					tmpDrawPoint = align.calcDrawPoint(paragraphWidth, lineWidth, drawPoint);
					region.updateRegion(drawString(line, tmpDrawPoint.dstX, tmpDrawPoint.dstY, tmpDrawPoint.dstZ), getLineMargin());
					line = "";
					lineWidth = 0;
					drawPoint.dstY -= getLineHeight();
					drawPoint.dstY -= getLineMargin();
					continue;
				} else if (ch == CarriageReturn.getCharacter()) {
					//	CR は無視する
					continue;
				}

				character = retreiveCharacter(ch);

//				float		currentWidth = drawPoint.dstX - dstX;
				
				if (paragraphWidth < lineWidth + character.getAdvance()) {
					//	paragraphWidth を超える場合はで折り返す
//					drawPoint.dstX = dstX;
					//	ここまでの文字を表示する
					tmpDrawPoint = align.calcDrawPoint(paragraphWidth, lineWidth, drawPoint);
					region.updateRegion(drawString(line, tmpDrawPoint.dstX, tmpDrawPoint.dstY, tmpDrawPoint.dstZ), getLineMargin());
					line = "";
					lineWidth = 0;
					drawPoint.dstY -= getLineHeight();
				}
				
				line += String.valueOf(ch);
				lineWidth += character.getAdvance();
			}

			//	残った文字を表示する
			if (!LwjgFontUtil.isEmpty(line)) {
				tmpDrawPoint = align.calcDrawPoint(paragraphWidth, lineWidth, drawPoint);
				region.updateRegion(drawString(line, tmpDrawPoint.dstX, tmpDrawPoint.dstY, tmpDrawPoint.dstZ), getLineMargin());
			}
		}
		
		return region;
	}

	/**
	 * Returns the total advance width for showing the specified String in the Font which is represented by this instance.<br>
	 * The advance is the distance from the leftmost point to the rightmost point on the string's baseline.<br>
	 * @param text the String to be measured
	 * @return the advance width of the specified String in the Font which is represented by this instance.
	 */
	public final int stringWidth(String text) {
		int		stringWidth = 0;

		if (!LwjgFontUtil.isEmpty(text)) {
			for (int i = 0; i < text.length(); i++) {
				char				ch = text.charAt(i);
				MappedCharacter	character = getMappedCharacter(ch);

				if (character == null) {
					//	指定の文字が描画対象でなければ、豆腐を表示する
					character = getMappedCharacter(NotMatchedSign.getCharacter());
				}

				stringWidth += character.getAdvance();
			}
		}

		return stringWidth;
	}

	/**
	 * Returns the advance width for showing the specified character in the Font which is represented by this instance.<br>
	 * The advance is the distance from the leftmost point to the rightmost point on the string's baseline.<br>
	 * @param character the character to be measured
	 * @return the advance width of the specified character in the Font which is represented by this instance.
	 */
	public final int stringWidth(char character) {
		return stringWidth(String.valueOf(character));
	}

	/**
	 * Return the specified character's font informations to render the character with font which this instance represents.<br>
	 * The returned MappedCharacter instance has ascent size, descent size, advance size and more of the specified character.
	 * @param character the target character.
	 * @return a MappedCharacter represents the specified character's font informations to render.
	 */
	public final MappedCharacter getMappedCharacter(char character) {
		return getFontMap().getMappedCharacter(character);
	}
	
	private String getImagePath(int index) {
		return getFontMap().getImageFile(index);
	}
	
	/**
	 * Set the color values as RGB to render any string with the font represented by this class.<br>
	 * @param red the red value of the color. It must be between 0f to 1f.
	 * @param green the green value of the color. It must be between 0f to 1f.
	 * @param blue the blue value of the color. It must be between 0f to 1f.
	 */
	public final void setColor(float red, float green, float blue) {
		this.red = red;
		this.green = green;
		this.blue = blue;
	}
	
	/**
	 * Set the color values as RGBA to render any string with the font represented by this class.<br>
	 * @param red the red value of the color. It must be between 0f to 1f.
	 * @param green the green value of the color. It must be between 0f to 1f.
	 * @param blue the blue value of the color. It must be between 0f to 1f.
	 * @param alpha the alpha value of the color. It must be between 0f to 1f.
	 */
	public final void setColor(float red, float green, float blue, float alpha) {
		this.red = red;
		this.green = green;
		this.blue = blue;
		this.alpha = alpha;
	}
	
	/**
	 * Set the alpha color values to render any string with the font represented by this class.<br>
	 * @param alpha the alpha value of the color. It must be between 0f to 1f.
	 */
	public final void setAlpha(float alpha) {
		this.alpha = alpha;
	}

	/**
	 * Returns the distance from one line's baseline to next line's baseline.<br>
	 * @return the distance from one line's baseline to next line's baseline.
	 */
	public int getLineHeight() {
		return lineHeight;
	}

	/**
	 * Set the distance from one line's baseline to next line's baseline.<br>
	 * @param lineHeight the distance from one line's baseline to next line's baseline.
	 */
	@Deprecated
	public void setLineHeight(int lineHeight) {
		this.lineHeight = lineHeight;
	}

	public int getLineMargin() {
		return lineMargin;
	}

	public void setLineMargin(int lineMargin) {
		this.lineMargin = lineMargin;
	}

	/**
	 * Reset the each line's distance to the default value.<br>
	 */
	public void resetLineHeight() {
		this.lineHeight = getDefaultLineHeight();
	}

	/**
	 *	Returns a FontMap instance which has informations that how to render any character with the font represented by this class.<br>
	 *	This method is only called by subclass which is generated by LwjgFont.
	 * @return a FontMap which has informations that how to render any character with the font represented by this class.
	 */
	protected abstract FontMap getFontMap();

	/**
	 * Returns a the each line's default distance.<br>
	 * It is the total of max ascent and max descent in the font.
	 */
	protected abstract int getDefaultLineHeight();
	
	static class DrawPoint {
		private float		dstX;
		private float		dstY;
		private float		dstZ;
		
		private DrawPoint(float dstX, float dstY, float dstZ) {
			this.dstX = dstX;
			this.dstY = dstY;
			this.dstZ = dstZ;
		}
	}
}
